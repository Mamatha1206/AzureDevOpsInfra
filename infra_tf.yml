trigger:
- manual
variables:
  backend_rg: 'mamatha-rg'
  backend_sa: 'mamathasg'
  backend_container: 'tfstate1'
  backend_key: 'prod.terraform.tfstate'
  aks_cluster: 'pradhi-cluster' # <-- change if your AKS cluster name differs
  aks_resource_group: 'mamatha-rg' 
  ingress_ip_name: 'mamatha-ingress-pip'    # <-- change if your static IP name differs
  ingress_ns: 'app-routing-system'
  ingress_service_name: 'nginx'

pool:
  name: mamatha-agentpool

steps:
- task: AzureCLI@2
  displayName: 'Terraform Init, Plan & Apply'
  inputs:
    azureSubscription: 'azuresubs'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
 
      echo "Initializing Terraform..."
      terraform init  \
        -backend-config="resource_group_name=$(backend_rg)" \
        -backend-config="storage_account_name=$(backend_sa)" \
        -backend-config="container_name=$(backend_container)" \
        -backend-config="key=$(backend_key)"
      # terraform force-unlock 648383d8-2a8b-b982-1b66-96fdf198b076

      echo "Running Terraform Plan..."
      terraform plan

      echo "Applying Terraform..."
      terraform apply -auto-approve -var="enable_tm=false"
      # terraform destroy -auto-approve


- task: AzureCLI@2
  displayName: 'Terraform Apply for Traffic Manager with Ingress IP'
  inputs:
    azureSubscription: 'azuresubs'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Fetching Ingress Public IP from service..."
      az aks get-credentials \
        --name $(aks_cluster) \
        --resource-group $(aks_resource_group) \
        --overwrite-existing

      export INGRESS_IP=$(kubectl get svc $(ingress_service_name) -n $(ingress_ns) -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
      echo "INGRESS_IP = $INGRESS_IP"
      echo "##vso[task.setvariable variable=ingressIp]$INGRESS_IP"

      terraform init \
        -backend-config="resource_group_name=$(backend_rg)" \
        -backend-config="storage_account_name=$(backend_sa)" \
        -backend-config="container_name=$(backend_container)" \
        -backend-config="key=$(backend_key)"

      terraform apply -auto-approve \
        -target=azurerm_traffic_manager_profile.tm_profile \
        -target=azurerm_traffic_manager_external_endpoint.primary_ingress \
        -var="enable_tm=true" \
        -var="ingress_ip=$INGRESS_IP"

